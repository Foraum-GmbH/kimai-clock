name: Build, Sign, Notarize and Release macOS App

on:
  push:
    tags:
      - '*'

env:
  APP_NAME: "KimaiClock"
  XCODE_PROJECT: "KimaiClock.xcodeproj"
  SCHEME: "KimaiClock"
  CONFIGURATION: "Release"
  APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
  APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
  APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}

jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Install create-dmg
      run: brew install create-dmg
      
    - name: Import Code-Signing Certificates
      uses: Apple-Actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
        p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

    - name: Build App
      run: |
        xcodebuild \
          -project "$XCODE_PROJECT" \
          -scheme "$SCHEME" \
          -configuration "$CONFIGURATION" \
          -archivePath "$APP_NAME.xcarchive" \
          -destination "generic/platform=macOS" \
          archive
          
    - name: Export App
      run: |
        # Create ExportOptions.plist
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>developer-id</string>
            <key>destination</key>
            <string>export</string>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>teamID</key>
            <string>${{ secrets.APPLE_TEAM_ID }}</string>
        </dict>
        </plist>
        EOF
        
        # Export the archive
        xcodebuild \
          -archivePath "$APP_NAME.xcarchive" \
          -exportArchive \
          -exportPath export \
          -exportOptionsPlist ExportOptions.plist

    - name: Prepare Notarization
      run: |
        # Verify we have the required secrets
        if [ -z "$APPLE_API_KEY" ]; then
          echo "Error: APPLE_API_KEY secret is empty"
          exit 1
        fi

        if [ -z "$APPLE_API_KEY_ID" ]; then
          echo "Error: APPLE_API_KEY_ID secret is empty"
          exit 1
        fi

        if [ -z "$APPLE_API_ISSUER" ]; then
          echo "Error: APPLE_API_ISSUER secret is empty"
          exit 1
        fi

        # Store notarization credentials with better error handling
        echo "Decoding APPLE_API_KEY..."
        if ! echo "$APPLE_API_KEY" | base64 --decode > AuthKey.p8; then
          echo "Error: Failed to decode base64 APPLE_API_KEY"
          echo "Key length: ${#APPLE_API_KEY}"
          echo "Key preview: $(echo "$APPLE_API_KEY" | head -c 50)..."
          exit 1
        fi

        # Verify the .p8 file was created successfully
        if [ ! -f "AuthKey.p8" ] || [ ! -s "AuthKey.p8" ]; then
          echo "Error: AuthKey.p8 file is empty or doesn't exist"
          ls -la AuthKey.p8 2>/dev/null || echo "AuthKey.p8 not found"
          exit 1
        fi

        echo "AuthKey.p8 created successfully ($(wc -c < AuthKey.p8) bytes)"

        # Debug: Check what .app files exist
        echo "=== Looking for .app files to notarize ==="
        find export/ -name "*.app" -type d
        
        # Find the actual .app file (it might not be exactly $APP_NAME.app)
        APP_FILE=$(find export/ -name "*.app" -type d | head -1)
        if [ -z "$APP_FILE" ]; then
          echo "Error: No .app file found in export directory"
          exit 1
        fi
        
        echo "Found app file: $APP_FILE"

    - name: Create DMG
      run: |
        # Debug: Check what we have to work with
        echo "=== Contents of export directory before DMG creation ==="
        ls -la export/
        
        # Find the actual .app file
        APP_FILE=$(find export/ -name "*.app" -type d | head -1)
        if [ -z "$APP_FILE" ]; then
          echo "Error: No .app file found in export directory"
          exit 1
        fi
        
        echo "Using app file: $APP_FILE"
        APP_NAME_ACTUAL=$(basename "$APP_FILE" .app)
        echo "Actual app name: $APP_NAME_ACTUAL"
        
        # Create a DMG file
        create-dmg \
          --volname "$APP_NAME_ACTUAL" \
          --background "$GITHUB_WORKSPACE/assets/background.png" \
          --volicon "$GITHUB_WORKSPACE/assets/volicon.icns" \
          --window-size 600 400 \
          --icon-size 128 \
          --icon "$APP_NAME_ACTUAL.app" 150 150 \
          --hide-extension "$APP_NAME_ACTUAL.app" \
          --app-drop-link 450 150 \
          "$APP_NAME_ACTUAL.dmg" \
          "export/" \
        || echo "Warning: create-dmg completed with warnings (this is often normal)"

    - name: Sign DMG
      run: |
        # Sign the DMG
        codesign --force --sign "${{ secrets.DEVELOPER_ID_APPLICATION }}" "$APP_NAME.dmg"
        
        # Verify signing
        codesign --verify --verbose "$APP_NAME.dmg"

    - name: Notarize DMG
      run: |
        # Submit DMG for notarization
        xcrun notarytool submit "$APP_NAME.dmg" \
          --key AuthKey.p8 \
          --key-id "${{ secrets.APPLE_API_KEY_ID }}" \
          --issuer "${{ secrets.APPLE_API_ISSUER }}" \
          --wait
          
        # Staple the notarization to DMG
        xcrun stapler staple "$APP_NAME.dmg"

    - name: Verify Notarization
      run: |
        # Verify the notarization was successful
        spctl --assess --type open --context context:primary-signature "$APP_NAME.dmg"

    - name: Get release info
      id: release_info
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "release_name=$TAG_NAME" >> $GITHUB_OUTPUT
        else
          echo "tag_name=latest" >> $GITHUB_OUTPUT
          echo "release_name=Latest Build" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_info.outputs.tag_name }}
        name: ${{ steps.release_info.outputs.release_name }}
        draft: false
        prerelease: false
        files: |
          ${{ env.APP_NAME }}.dmg
        body: |
          ## Installation
          
          1. Download the DMG file
          2. Double-click to mount the disk image
          3. Drag the app to your Applications folder
          
          **Note**: This app is signed and notarized by Apple.
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}

